{/* <!-- Profile dropdown --> */}
                            <div className="relative ml-3">
                                <div>
                                    <button type="button" onClick={() => setOpenForProfile(!isOpenProfile)} className="relative flex rounded-full text-sm" id="user-menu-button" aria-expanded="false" aria-haspopup="true">
                                        <span className="absolute -inset-1.5"></span>
                                        <span className="sr-only">Open user menu</span>
                                        <img className="h-10 w-10 rounded-full" src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80" alt="" />
                                    </button>
                                </div>
                                {isOpenProfile && (
                                    <div className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md py-1 shadow-lg" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button">
                                        <a href="#" className="block px-4 py-2 text-sm text-gray-700" role="menuitem" id="user-menu-item-0">Your Profile</a>
                                        <a href="#" className="block px-4 py-2 text-sm text-gray-700" role="menuitem" id="user-menu-item-1">Settings</a>
                                        <a href="#" className="block px-4 py-2 text-sm text-gray-700" role="menuitem" id="user-menu-item-2">Sign out</a>
                                    </div>
                                )}

                            </div>

-------------------------------

import { useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";
import { useEffect, useState } from "react";

const PrivateRoute = ({ children }) => {
    const navigate = useNavigate();
    const isAuthenticated = useSelector((state) => state.auth.isAuthenticated);

    const [isRedirecting, setIsRedirecting] = useState(false);

    useEffect(() => {
        if (isAuthenticated) {
            setIsRedirecting(true);
        }
    }, [isAuthenticated]);

    if (isRedirecting) {
        return navigate('/');
    }

    return children;
};

export default PrivateRoute;

----------------------------------------------

import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import toast from 'react-hot-toast';
import SearchBox from './SearchBox';

export default function GetCarDetails() {
    const isAuthenticated = useSelector((state) => state.auth.isAuthenticated);
    const [data, setData] = useState([]);
    const [page, setPage] = useState(1);
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();
    const observer = useRef();
    const lastItemRef = useRef();

    async function fetchCarDetails(page) {
        setLoading(true);
        try {
            const response = await axios.get(`http://localhost:5000/api/v1/cardetails/getcar?page=${page}`);
            setData((prevData) => [...prevData, ...response.data]);
        } catch (error) {
            toast.error('Error fetching car details');
        } finally {
            setLoading(false);
        }
    }

    const CardClick = (car) => {
        if (isAuthenticated) {
            navigate(`/cardetail/${car._id}`);
        } else {
            toast.error('Please login to view car details');
        }
    };

    useEffect(() => {
        fetchCarDetails(page);
    }, [page]);

    useEffect(() => {
        const options = {
            root: null,
            rootMargin: '0px',
            threshold: 1.0
        };

        const callback = (entries) => {
            if (entries[0].isIntersecting && !loading) {
                setPage((prevPage) => prevPage + 1);
            }
        };

        observer.current = new IntersectionObserver(callback, options);
        if (lastItemRef.current) {
            observer.current.observe(lastItemRef.current);
        }

        return () => {
            if (lastItemRef.current) {
                observer.current.unobserve(lastItemRef.current);
            }
        };
    }, [lastItemRef, loading]);

    return (
        <div className='bg-one py-24 dark:bg-five dark:text-six'>
            <SearchBox />
            <div className="grid w-full place-items-center space-y-4 px-2 py-10 md:grid-cols-2 md:gap-6 md:space-y-0 lg:grid-cols-3">
                {data.map((car, index) => {
                    const isLastItem = index === data.length - 1;

                    return (
                        <div
                            key={car._id}
                            ref={isLastItem ? lastItemRef : null}
                            className="rounded-md border w-4/5 hover:scale-105 h-full"
                        >
                            <img
                                src="https://images.pexels.com/photos/170811/pexels-photo-170811.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                                alt="Car"
                                className="aspect-[16/9] w-full rounded-md md:aspect-auto md:h-[300px] lg:h-[200px]"
                            />
                            <div className="p-4 text-center space-y-4">
                                <h1 className="inline-flex items-center text-lg font-semibold">
                                    Owner name - {car.OwnerName}
                                </h1>
                                <h2 className="inline-flex items-center text-lg font-semibold">
                                    Owner Contact - {car.OwnerContact}
                                </h2>
                                <h3 className="inline-flex items-center text-lg font-semibold">
                                    Owner's Email - {car.OwnerEmail}
                                </h3>
                                <p>Owner Address - {car.OwnerAddress}</p>
                                <div className="mt-4">
                                    <span className="mb-2 mr-2 inline-block rounded-full bg-gray-100 px-3 py-1 text-[10px] font-semibold text-gray-900">#Sneakers</span>
                                    <span className="mb-2 mr-2 inline-block rounded-full bg-gray-100 px-3 py-1 text-[10px] font-semibold text-gray-900">#Nike</span>
                                    <span className="mb-2 mr-2 inline-block rounded-full bg-gray-100 px-3 py-1 text-[10px] font-semibold text-gray-900">#Airmax</span>
                                </div>
                                <div className="mt-3 flex items-center space-x-2">
                                    <span className="block text-sm font-semibold">Colors : </span>
                                    <span className="block h-4 w-4 rounded-full border-2 border-gray-300 bg-red-400"></span>
                                    <span className="block h-4 w-4 rounded-full border-2 border-gray-300 bg-purple-400"></span>
                                    <span className="block h-4 w-4 rounded-full border-2 border-gray-300 bg-orange-400"></span>
                                </div>
                                <button
                                    type="button"
                                    onClick={() => CardClick(car)}
                                    className="mt-4 w-full rounded-sm border border-three px-2 py-1.5 text-sm font-semibold shadow-sm hover:bg-three hover:text-one"
                                >
                                    View Full Details
                                </button>
                                <button
                                    type="button"
                                    className="mt-4 w-full rounded-sm border border-three px-2 py-1.5 text-sm font-semibold shadow-sm hover:bg-three hover:text-one"
                                >
                                    Chat with the Owner
                                </button>
                            </div>
                        </div>
                    );
                })}
                {loading && <p>Loading more cars...</p>}
            </div>
        </div>
    );
}
